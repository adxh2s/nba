name: Python CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      ENV:
        description: 'Environment to use'
        required: false
        default: 'dev'
      PYTHON_VERSIONS:
        description: 'Python versions (comma separated)'
        required: false
        default: '3.10,3.11,3.12,3.13'
      OS:
        description: 'Operating systems (comma separated)'
        required: false
        default: 'ubuntu-latest,macos-latest,windows-latest'

env:
  ENV: ${{ github.event.inputs.ENV || 'dev' }}
  PYTHON_VERSIONS: ${{ github.event.inputs.PYTHON_VERSIONS || '3.10,3.11,3.12,3.13' }}
  OS: ${{ github.event.inputs.OS || 'ubuntu-latest,macos-latest,windows-latest' }}

jobs:
  lint:
    name: Lint and format with Ruff
    runs-on: ubuntu-latest
    env:
      ENV: ${{ env.ENV }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Ruff
        run: pip install ruff
      - name: Install dependencies for lint
        run: pip install -r requirements-${{ env.ENV }}.txt
      - name: Run Ruff Check
        run: ruff check --output-format=github --exit-zero
      - name: Run Ruff Format Check
        run: ruff format --diff --exit-zero

  type:
    name: Type checking with mypy
    needs: lint
    runs-on: ubuntu-latest
    env:
      ENV: ${{ env.ENV }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install mypy and dependencies
        run: |
          pip install mypy
          pip install -r requirements-${{ env.ENV }}.txt
      - name: Run mypy
        run: mypy --ignore-missing-imports src/  # adapte le chemin

  security:
    name: Security audit
    needs: lint
    runs-on: ubuntu-latest
    env:
      ENV: ${{ env.ENV }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install bandit and safety
        run: pip install bandit safety
      - name: Run Bandit
        run: bandit -r src/  # adapte le chemin
      - name: Run Safety
        run: safety check

  test:
    name: Run tests with pytest & coverage
    needs: [lint, type, security]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ${{ fromJson('["' + env.PYTHON_VERSIONS.replace(',', '","') + '"]') }}
        os: ${{ fromJson('["' + env.OS.replace(',', '","') + '"]') }}
      fail-fast: false
    env:
      APP_ENV: "test"
      DEBUG: "false"
      ENV: ${{ env.ENV }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements-${{ env.ENV }}.txt
      - name: Run tests with coverage
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term-missing --maxfail=1 --disable-warnings -v
